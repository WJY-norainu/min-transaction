from transaction_calculator import *

# utility function to read test case generated by test_generator.py
def read_in_file(file_path):
	lines = open(file_path).read().split('\n')
	N, T = lines[0].split(' ')
	names = [str(i) for i in range(int(N))]
	transactions = []
	for i in range(1, len(lines)):
		name, amt = lines[i].split(' ')
		transactions.append([name, int(amt)])
	return transactions, names

'''
get_net
'''
def test_no_transaction():
	transactions = []
	names = ["A", "B"]
	expected_lenders = {}
	expected_borrowers = {}
	lenders, borrowers = get_net(transactions, names)
	if lenders == expected_lenders and borrowers == expected_borrowers:
		print("test_no_transaction passed")
	else:
		print("test_no_transaction failed")


def test_no_net():
	transactions = [
		["A", 10],
		["B", 10],
		["C", 10]
	]
	names = ["A", "B", "C"]
	expected_lenders = {}
	expected_borrowers = {}
	lenders, borrowers = get_net(transactions, names)
	if lenders == expected_lenders and borrowers == expected_borrowers:
		print("test_no_net passed")
	else:
		print("test_no_net failed")


def test_some_never_pay():
	transactions = [
		["A", 10]
	]
	names = ["A", "B"]
	expected_lenders = {"A": 5}
	expected_borrowers = {"B": 5}
	lenders, borrowers = get_net(transactions, names)
	if lenders == expected_lenders and borrowers == expected_borrowers:
		print("test_some_never_pay passed")
	else:
		print("test_some_never_pay failed")
'''
subroutine
'''
def is_legal_assignment(lenders, borrowers, assignments):
	lent_amt = sum(lenders.values())
	borrowed_amt = sum(borrowers.values())
	if borrowed_amt != lent_amt:
		print("Borrowed amount and lent amount don't match")
		return False
	for borrower, lender, amt in assignments:
		borrowers[borrower] -= amt
		lenders[lender] -= amt
	if sum(borrowers.values()) != sum(lenders.values()):
		print("Assigned amount doesn't match borrowed/lent amount")
		return False
	return True

def test1():
	lenders = {
		'C': 5,
		'D': 5,
		'E': 8
	}
	borrowers = {
		'A': 8,
		'B': 10
	}
	
	expected_length = 3
	assignments = subroutine(lenders, borrowers, [])
	if len(assignments) != 3:
		print("test1 failed")
	if is_legal_assignment(lenders, borrowers, assignments):
		print("test1 passed")
	else:
		print("test1 failed")

def test_no_borrowers_lenders():
	borrowers = {}
	lenders = {}
	expected_length = 0
	assignments = subroutine(lenders, borrowers, [])
	if assignments != []:
		print("test_no_borrowers_lenders failed")
	else:
		print("test_no_borrowers_lenders passed")

'''
calculate
'''
# the purpose of the random test cases is to check if algorithm terminates properly
def test_random1():
	transactions, names = read_in_file('random1.in')
	calculate(transactions, names)

def test_random2():
	transactions, names = read_in_file('random2.in')
	calculate(transactions, names)

def test_random3():
	transactions, names = read_in_file('random3.in')
	calculate(transactions, names)

def test_random4():
	transactions, names = read_in_file('random4.in')
	calculate(transactions, names)

if __name__ == "__main__":
	test_no_transaction()
	test_no_net()
	test_some_never_pay()
	test1()
	test_no_borrowers_lenders()
	test_random1()
	test_random2()
	test_random3()
	test_random4()
